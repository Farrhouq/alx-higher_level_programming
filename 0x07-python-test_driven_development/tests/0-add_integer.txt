Test cases for the '0-add_integer' module
===========================================

Importing the module
    >>> add_integer = __import__("0-add_integer").add_integer



Testing module docstring
    >>> docstring = add_integer.__doc__
    >>> len(docstring) > 1
    True

Testing function docstring
    >>> docstring = add_integer.__doc__
    >>> len(docstring) > 1
    True


Now using it:
    Normal integers
        >>> add_integer(1, 2)
        3

    Non float or int types
        >>> add_integer("a", 2)
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "<stdin>", line 17, in add_integer
        TypeError: a must be an integer
        >>> add_integer(5, "a")
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "<stdin>", line 21, in add_integer
        TypeError: b must be an integer

    Fewer arguments
        >>> add_integer(1)
        99
        >>> add_integer()
        Traceback (most recent call last):
          File "/usr/lib/python3.10/doctest.py", line 1350, in __run
            exec(compile(example.source, filename, "single",
          File "<doctest 0-add_integer.txt[9]>", line 1, in <module>
            add_integer()
        TypeError: add_integer() missing 1 required positional argument: 'a'

    Greater number of arguments
        >> add_integer(5, 6, 7)
        Traceback (most recent call last):
            ...
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
